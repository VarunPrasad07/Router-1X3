module router_sync
(
    input detect_add,
    input write_enb_reg,
    input clock,
    input resetn,
    input read_enb_0,
    input read_enb_1,
    input read_enb_2,
    input full_0,
    input full_1,
    input full_2,
    input empty_0,
    input empty_1,
    input empty_2,
    input [1:0] data_in,
    output reg [2:0] write_enb,
    output reg fifo_full,
    output reg soft_reset_0,
    output reg soft_reset_1,
    output reg soft_reset_2,
    output vld_out_0,
    output vld_out_1,
    output vld_out_2
 );
    reg [1:0] fifo_add;//store the address
    reg [4:0] counter_soft_reset0;
    reg [4:0] counter_soft_reset1;
    reg [4:0] counter_soft_reset2;
 //capture the address
 always@(posedge clock)
 begin
 if(!resetn)
   fifo_add<=0;
 else if(detect_add)
   fifo_add<=data_in;
end
//generating the write enb
always@(*)
begin
if(write_enb_reg)
  case(fifo_add)
  2'b00:write_enb=3'b001;
  2'b01:write_enb=3'b010;
  2'b10:write_enb=3'b100;
  default :write_enb=3'b000;
  endcase
end
//fifofull logic
always@(*)begin
if(write_enb_reg)
case(fifo_add)
    2'b00:fifo_full=full_0;
    2'b01:fifo_full=full_1;
    2'b10:fifo_full=full_2;
endcase
end
//valid _out
assign vld_out_0=!empty_0;
assign vld_out_1=!empty_1;
assign vld_out_2=!empty_2;
// softreset,depend on validout then readenable then wait for the 30 cycle
always@(posedge clock)
begin
if(!resetn)
begin
    soft_reset_0<=0;
    counter_soft_reset0<=0;
end
else if(~vld_out_0)//valid out not asserted
begin
    soft_reset_0<=0;
    counter_soft_reset0<=0;
end
else if(read_enb_0)
begin
    soft_reset_0<=0;
    counter_soft_reset0<=0;
end
else if(counter_soft_reset0<=29)
begin
    soft_reset_0<=0;
    counter_soft_reset0<=counter_soft_reset0+1;
end
else
begin
    soft_reset_0<=1;
    counter_soft_reset0<=0;
end
end

always@(posedge clock)
begin
if(!resetn)
begin
    soft_reset_1<=0;
    counter_soft_reset1<=0;
end
else if(~vld_out_1)//valid out not asserted
begin
    soft_reset_1<=0;
    counter_soft_reset1<=0;
end
else if(read_enb_1)
begin
    soft_reset_1<=0;
    counter_soft_reset1<=0;
end
else if(counter_soft_reset1<=29)
begin
    soft_reset_1<=0;
    counter_soft_reset1<=counter_soft_reset1+1;
end
else
begin
    soft_reset_1<=1;
    counter_soft_reset1<=0;
end
end
always@(posedge clock)
begin
if(!resetn)
begin
    soft_reset_2<=0;
    counter_soft_reset2<=0;
end
else if(~vld_out_2)//valid out not asserted
begin
    soft_reset_2<=0;
    counter_soft_reset2<=0;
end
else if(read_enb_2)
begin
    soft_reset_2<=0;
    counter_soft_reset2<=0;
end
else if(counter_soft_reset2<=29)
begin
    soft_reset_2<=0;
    counter_soft_reset2<=counter_soft_reset2+1;
end
else
begin
    soft_reset_2<=1;
    counter_soft_reset2<=0;
end
end
endmodule

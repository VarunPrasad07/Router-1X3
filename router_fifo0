module router_fifo(
    input clock, reset, write_enb, read_enb, soft_reset, lfd_state,
    input [8:0] data_in,
    output empty, full,
    output reg [8:0] data_out
);
    
    reg [4:0] write_ptr, read_ptr;
    reg [6:0] fifo_counter;
    reg lfd_state_s;
    reg [8:0] mem[15:0];
    integer i;

    // Read and Write Pointer Logic
    always @(posedge clock or negedge reset) begin
        if (!reset) begin  
            read_ptr  <= 5'b0;
            write_ptr <= 5'b0;
        end else if (soft_reset) begin
            read_ptr  <= 5'b0;
            write_ptr <= 5'b0;
        end else begin
            if (read_enb && !empty)
                read_ptr <= read_ptr + 1;

            if (write_enb && !full)
                write_ptr <= write_ptr + 1;
        end
    end

    // LFD State Delay Logic
    always @(posedge clock or negedge reset) begin
        if (!reset)
            lfd_state_s <= 0;
        else
            lfd_state_s <= lfd_state;
    end

    // Write Operation
    always @(posedge clock or negedge reset) begin
        if (!reset) begin
            for (i = 0; i < 16; i = i + 1)
                mem[i] <= 0;
        end else if (soft_reset) begin
            for (i = 0; i < 16; i = i + 1)
                mem[i] <= 0;
        end else if (write_enb && !full) begin
            mem[write_ptr[3:0]] <= {lfd_state_s, data_in};
        end
    end

    // Read Operation - FIX: Remove High Impedance
    always @(posedge clock or negedge reset) begin
        if (!reset)
            data_out <= 9'b0;  // Fix: Use a valid value instead of high impedance
        else if (soft_reset)
            data_out <= 9'b0;
        else if (read_enb && !empty)
            data_out <= mem[read_ptr[3:0]];
        else if (fifo_counter == 0)
            data_out <= 9'b0;  // Fix: Replace `9'hz` with valid default value
    end  

    // FIFO Counter Logic
    always @(posedge clock or negedge reset) begin
        if (!reset)
            fifo_counter <= 0;
        else if (soft_reset)
            fifo_counter <= 0;
        else if (read_enb && !empty) begin
            if (mem[read_ptr[3:0]][8] == 1)
                fifo_counter <= mem[read_ptr[3:0]][7:2] + 1;  // Payload length + parity
            else if (fifo_counter != 0)
                fifo_counter <= fifo_counter - 1;
        end
    end

    // FIFO Full and Empty Flags
    assign full  = (write_ptr[4] != read_ptr[4] && write_ptr[3:0] == read_ptr) ? 1'b1 : 1'b0;
    assign empty = (write_ptr == read_ptr) ? 1'b1 : 1'b0;

endmodule

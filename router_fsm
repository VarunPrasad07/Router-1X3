module router_fsm( 
     input clock,
     input resetn,
     input pkt_valid,
     input parity_done,
     input soft_reset_0,
     input soft_reset_1,
     input soft_reset_2,
     input fifo_full,
     input low_pkt_valid,
     input fifo_empty_0,
     input fifo_empty_1,
     input fifo_empty_2,
     input [1:0] data_in,
     output detect_add,
     output busy,
     output ld_state,
     output laf_state,
     output full_state,
     output write_enb_reg,
     output rst_int_reg,
     output lfd_state
);
parameter decode_address =3'b000,
          wait_till_empty=3'b001,
          load_first_data=3'b010,
          load_data      =3'b011,
          load_parity    =3'b100,
       check_parity_error=3'b101,
       fifo_full_state   =3'b110,
       load_after_full   =3'b111;
 reg [2:0] state,next_state;
 reg addr;
 always@(posedge clock or negedge resetn)
 if(!resetn)
 begin
    state<=decode_address;
 end
 else if(soft_reset_0||soft_reset_1||soft_reset_2)
        state<=decode_address;
 else
 begin
    state<=next_state;
 end
 //
 always@(*)
 begin
 next_state<=decode_address;
 case(state)
            decode_address: if ((pkt_valid & &(data_in[1:0] == 0) && fifo_empty_0) ||
                                    (pkt_valid && (data_in[1:0] == 1) && fifo_empty_1) || 
                                         (pkt_valid && (data_in[1:0] == 2) && fifo_empty_2))
                            begin
                                next_state <= load_first_data;
                            end
                            else if((pkt_valid && (data_in[1:0] == 0) && !fifo_empty_0) | 
                                    (pkt_valid && (data_in[1:0] == 1) && !fifo_empty_1) | 
                                         (pkt_valid && (data_in[1:0] == 2) && !fifo_empty_2))
                            begin
                                next_state<=wait_till_empty;
                            end
                            else
                            begin
                                next_state<=decode_address;
                            end
            
            wait_till_empty:if((fifo_empty_0&&(data_in[1:0]==0))||(fifo_empty_1&&(data_in[1:0]==1))||(fifo_empty_2&&(data_in[1:0]==2)))
                            begin
                                next_state<=load_first_data;
                            end
                            else 
                            begin
                                next_state<=wait_till_empty;
                            end
              load_first_data :begin
                                next_state<=load_data;
                              end
             load_data     : if(!fifo_full&&!pkt_valid)
                            begin
                                next_state<=load_parity;
                            end
                            else if(fifo_full)
                            begin
                                next_state<=fifo_full_state;
                            end
                            else
                            begin
                               next_state<=load_data;
                            end
              load_parity    :begin
                                next_state<=check_parity_error;
                              end
               check_parity_error:if(fifo_full)
                            begin
                                next_state<=fifo_full_state;
                            end
                            else if(!fifo_full)
                            begin
                                next_state<=decode_address;
                            end
                            else
                            begin
                                next_state<=decode_address;
                            end
            fifo_full_state :if(fifo_full)
                             begin
                                next_state<=fifo_full_state;
                             end
                             else if(!fifo_full)
                             begin
                                next_state<=load_after_full;
                             end
                             else
                             begin
                                next_state<=decode_address;
                             end
            
            load_after_full :if(!parity_done&&!low_pkt_valid)
                            begin
                                next_state<=load_data;
                            end
                            else if(!parity_done&&low_pkt_valid)
                            begin
                                next_state<=load_parity;
                            end
                            else
                            begin
                                next_state<=decode_address;
                            end
        
          default : begin
                        next_state<=decode_address;
                    end
                    
                   
 endcase
 
 end
assign detect_add=(state==decode_address)?1'b1:1'b0;
 assign ld_state=(state==load_data)?1'b1:1'b0;
 assign laf_state=(state==load_after_full)?1'b1:1'b0;
 assign full_state=(state==fifo_full_state)?1'b1:1'b0;
 assign write_enb_reg=((state==load_data)||(state==load_parity)||(state==load_after_full))?1'b1:1'b0;
 assign rst_int_reg=(state==check_parity_error)?1'b1:1'b0;
 assign lfd_state=(state==load_first_data)?1'b1:1'b0;
 assign busy=((state==wait_till_empty)||(state==load_first_data)||(state==load_parity)||(state==fifo_full_state)||(state==load_after_full)||(state==check_parity_error))?1'b1:1'b0;       
     
          
endmodule
